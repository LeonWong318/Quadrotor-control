component plant
%Plant of quadrocopter

inputs
   ctrl={[0;0;0;0],'N'}; %Thrust:left
end

outputs
    pos = {[0;0;0],'m'};       %Position:right
    v   = {[0;0;0], 'm/s' };   %Velocity:right
    a   = {[0;0;0], 'm/s^2' }; %Acceleration:right
    
    angle = {[0;0;0],'rad'};   %Angle:right
    w     = {[0;0;0],'rad/s'}; %Angular velocity:right
end

parameters
    m = {0.027,'kg'};       %Mass
    g = {9.81,'m/s^2'};     %Gravity
    d = {0.046,'m'};        %Arm length
    lift = {1.9796e-9,'N/(rad/s)^2'}; %Lift constant
    drag = {2.5383e-11,'N*m/(rad/s)^2'};%Drag constant
    F = {0.25,'N*s/m'}      %Air friction coefficient
end

parameters(Access=private)    
    %Moment of inertia matrix
    Jx = {1.1463e-5,'kg*m^2'};
    Jy = {1.6993e-5,'kg*m^2'};
    Jz = {2.9944e-5,'kg*m^2'};
    J = [Jx,0,0;0,Jy,0;0,0,Jz];

    % Add time invariant parameters here 

end

variables(Access=private)
    
    % Add time variant variables here
    xrot={zeros(3,3),'1'};
    yrot={zeros(3,3),'1'};
    zrot={zeros(3,3),'1'};

    B2W={zeros(3,3),'1'};
    %W2B={zeros(3,3),'1'};

    phi={0,'rad'};
    theta={0,'rad'};
    psi={0,'rad'};

    w_b = {[0;0;0],'rad/s'};
    %rotor_speed={zeros(4,1),'rad/s'};

   % T={zeros(3,3),'1'}
    Tx={0,'N*m'};
    Ty={0,'N*m'};
    Tz={0,'N*m'};
    T_b={zeros(3,1),'N*m'};
    %T_drag={zeros(4,1),'N*m'};



end

equations
    %sum all forces:
    %m*a==B2W*[0;0; ctrl(1)+ctrl(2)+ctrl(3)+ctrl(4)]-[0; 0; m*g]-F*v;
    

    a==g*[0; 0;0];
    pos.der==v;
    v.der==a;

    xrot==[1   0          0    ;
           0 cos(phi) -sin(phi);
           0 sin(phi) cos(phi)];

    yrot==[cos(theta)  0 sin(theta) ;
            0           1       0   ;
           -sin(theta) 0 cos(theta)];

    zrot==[cos(psi) -sin(psi) 0;
            sin(psi) cos(psi) 0;
               0       0      1];

    %B2W==xrot*yrot*zrot;
    B2W == zrot*yrot*xrot;

    angle==[phi;theta;psi];

    %angle.der==w;
    

    %rotor_speed==sqrt(abs(ctrl)/lift);
    

    %torque expression
    

    Tx==d*cos(pi/4)*(ctrl(3)+ctrl(4)-ctrl(1)-ctrl(2));
    Ty==d*cos(pi/4)*(-ctrl(1)-ctrl(4)+ctrl(3)+ctrl(2));
    %Ty==d*cos(pi/4)*(ctrl(1)+ctrl(4)-ctrl(3)-ctrl(2));  %orig
    %Tz==drag*(-rotor_speed(1)^2-rotor_speed(3)^2+rotor_speed(2)^2+rotor_speed(4)^2);
    %Tz==drag*(rotor_speed(1)^2+rotor_speed(3)^2-rotor_speed(2)^2-rotor_speed(4)^2); %orig

    Tz == (drag/lift)*(-ctrl(1)-ctrl(3)+ctrl(2)+ctrl(4));
    T_b==[Tx;Ty;Tz];

    

    J*w_b.der==-cross(w_b, J*w_b)+T_b;  %w-body
    %w == T_b*w_b;
    w_b==[1  0                sin(theta)           ;
        0 cos(phi) -sin(phi)*cos(theta);
        0 sin(phi) cos(phi)*cos(theta)]*w;
    angle.der == w;
    %

    % Add all equations here 
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % REPLACE/REMOVE ALL THESE EQUATIONS
    %pos == {[0;0;0],'m'};
    %v == {[0;0;0], 'm/s' };
    %a == {[0;0;0], 'm/s^2' };
    %angle == {[0;0;0],'rad'};
    %w == {[0;0;0],'rad/s'};
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

end
end