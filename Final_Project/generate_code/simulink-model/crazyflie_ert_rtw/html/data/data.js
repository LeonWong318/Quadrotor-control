var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"crazyflie","ref":false,"files":[{"name":"crazyflie.c","type":"source","group":"model","path":"D:\\Chalmers\\Sp4\\SSY191\\BitcrazeSharedFolder\\test\\project2024-13group\\generate_code\\simulink-model\\crazyflie_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: crazyflie.c\r\n *\r\n * Code generated for Simulink model 'crazyflie'.\r\n *\r\n * Model version                  : 9.6\r\n * Simulink Coder version         : 23.2 (R2023b) 01-Aug-2023\r\n * C/C++ source code generated on : Thu May  2 11:48:02 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"crazyflie.h\"\r\n#include <math.h>\r\n#include \"rtwtypes.h\"\r\n\r\n/* Block signals and states (default storage) */\r\nDW_crazyflie_T crazyflie_DW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU_crazyflie_T crazyflie_U;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY_crazyflie_T crazyflie_Y;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_crazyflie_T crazyflie_M_;\r\nRT_MODEL_crazyflie_T *const crazyflie_M = &crazyflie_M_;\r\nstatic void rate_scheduler(void);\r\n\r\n/*\r\n *         This function updates active task flag for each subrate.\r\n *         The function is called at model base rate, hence the\r\n *         generated code self-manages all its subrates.\r\n */\r\nstatic void rate_scheduler(void)\r\n{\r\n  /* Compute which subrates run during the next base time step.  Subrates\r\n   * are an integer multiple of the base rate counter.  Therefore, the subtask\r\n   * counter is reset when it reaches its limit (zero means run).\r\n   */\r\n  (crazyflie_M->Timing.TaskCounters.TID[1])++;\r\n  if ((crazyflie_M->Timing.TaskCounters.TID[1]) > 9) {/* Sample time: [0.01s, 0.0s] */\r\n    crazyflie_M->Timing.TaskCounters.TID[1] = 0;\r\n  }\r\n}\r\n\r\n/* Model step function */\r\nvoid crazyflie_step(void)\r\n{\r\n  real_T tmp[5];\r\n  real_T rtb_Sum3_m[4];\r\n  real_T rtb_Sum3;\r\n  real_T rtb_Sum3_l;\r\n  real_T tmp_0;\r\n  int32_T i;\r\n  int32_T i_0;\r\n  if (crazyflie_M->Timing.TaskCounters.TID[1] == 0) {\r\n    /* Sum: '<S2>/Sum3' incorporates:\r\n     *  Constant: '<S2>/Gamma'\r\n     *  Constant: '<S2>/SamplingRate'\r\n     *  Delay: '<S2>/Delay'\r\n     *  Inport: '<Root>/Acc_y'\r\n     *  Inport: '<Root>/Acc_z'\r\n     *  Inport: '<Root>/Gyro_x'\r\n     *  Product: '<S2>/Product'\r\n     *  Product: '<S2>/Product1'\r\n     *  Product: '<S2>/Product2'\r\n     *  Sum: '<S2>/Sum2'\r\n     *  Trigonometry: '<S1>/Atan4'\r\n     */\r\n    rtb_Sum3 = (0.01 * crazyflie_U.Gyro_x + crazyflie_DW.Delay_DSTATE) * 0.1 +\r\n      atan2(crazyflie_U.Acc_y, crazyflie_U.Acc_z) * 0.9;\r\n\r\n    /* Sum: '<S3>/Sum3' incorporates:\r\n     *  Constant: '<S3>/Gamma'\r\n     *  Constant: '<S3>/SamplingRate'\r\n     *  Delay: '<S3>/Delay'\r\n     *  Gain: '<S1>/Gain1'\r\n     *  Inport: '<Root>/Acc_x'\r\n     *  Inport: '<Root>/Acc_y'\r\n     *  Inport: '<Root>/Acc_z'\r\n     *  Inport: '<Root>/Gyro_y'\r\n     *  MATLAB Function: '<S1>/MATLAB Function1'\r\n     *  Product: '<S3>/Product'\r\n     *  Product: '<S3>/Product1'\r\n     *  Product: '<S3>/Product2'\r\n     *  Sum: '<S3>/Sum2'\r\n     *  Trigonometry: '<S1>/Atan3'\r\n     */\r\n    /* MATLAB Function 'Subsystem/MATLAB Function1': '<S4>:1' */\r\n    /* '<S4>:1:3' y = sqrt(u*u+v*v); */\r\n    rtb_Sum3_l = atan2(-crazyflie_U.Acc_x, sqrt(crazyflie_U.Acc_y *\r\n      crazyflie_U.Acc_y + crazyflie_U.Acc_z * crazyflie_U.Acc_z)) * 0.9 + (0.01 *\r\n      crazyflie_U.Gyro_y + crazyflie_DW.Delay_DSTATE_p) * 0.1;\r\n\r\n    /* SignalConversion generated from: '<Root>/Gain' incorporates:\r\n     *  Gain: '<S1>/Gain'\r\n     *  Gain: '<S1>/Gain2'\r\n     *  Inport: '<Root>/Gyro_x'\r\n     *  Inport: '<Root>/Gyro_y'\r\n     *  Inport: '<Root>/Gyro_z'\r\n     *  Inport: '<Root>/Ref_Pitch'\r\n     *  Inport: '<Root>/Ref_Roll'\r\n     *  Inport: '<Root>/Ref_YawRate'\r\n     *  Sum: '<Root>/Sum'\r\n     *  Sum: '<Root>/Sum1'\r\n     *  Sum: '<Root>/Sum2'\r\n     */\r\n    tmp[0] = 57.295779513082323 * rtb_Sum3 - crazyflie_U.Ref_Roll;\r\n    tmp[1] = 57.295779513082323 * rtb_Sum3_l - crazyflie_U.Ref_Pitch;\r\n    tmp[2] = crazyflie_U.Gyro_x;\r\n    tmp[3] = crazyflie_U.Gyro_y;\r\n    tmp[4] = crazyflie_U.Gyro_z - crazyflie_U.Ref_YawRate;\r\n\r\n    /* Sum: '<Root>/Sum3' incorporates:\r\n     *  Constant: '<Root>/Constant'\r\n     *  Gain: '<Root>/Gain'\r\n     */\r\n    for (i = 0; i < 4; i++) {\r\n      tmp_0 = 0.0;\r\n      for (i_0 = 0; i_0 < 5; i_0++) {\r\n        tmp_0 += crazyflie_ConstP.Gain_Gain[(i_0 << 2) + i] * tmp[i_0];\r\n      }\r\n\r\n      rtb_Sum3_m[i] = tmp_0 + 10.0;\r\n    }\r\n\r\n    /* End of Sum: '<Root>/Sum3' */\r\n\r\n    /* DataTypeConversion: '<Root>/ToUint16' */\r\n    if (rtb_Sum3_m[0] < 65536.0) {\r\n      if (rtb_Sum3_m[0] >= 0.0) {\r\n        /* Outport: '<Root>/Motor_1' */\r\n        crazyflie_Y.Motor_1 = (uint16_T)rtb_Sum3_m[0];\r\n      } else {\r\n        /* Outport: '<Root>/Motor_1' */\r\n        crazyflie_Y.Motor_1 = 0U;\r\n      }\r\n    } else {\r\n      /* Outport: '<Root>/Motor_1' */\r\n      crazyflie_Y.Motor_1 = MAX_uint16_T;\r\n    }\r\n\r\n    /* End of DataTypeConversion: '<Root>/ToUint16' */\r\n\r\n    /* DataTypeConversion: '<Root>/ToUint16_1' */\r\n    if (rtb_Sum3_m[1] < 65536.0) {\r\n      if (rtb_Sum3_m[1] >= 0.0) {\r\n        /* Outport: '<Root>/Motor_2' */\r\n        crazyflie_Y.Motor_2 = (uint16_T)rtb_Sum3_m[1];\r\n      } else {\r\n        /* Outport: '<Root>/Motor_2' */\r\n        crazyflie_Y.Motor_2 = 0U;\r\n      }\r\n    } else {\r\n      /* Outport: '<Root>/Motor_2' */\r\n      crazyflie_Y.Motor_2 = MAX_uint16_T;\r\n    }\r\n\r\n    /* End of DataTypeConversion: '<Root>/ToUint16_1' */\r\n\r\n    /* DataTypeConversion: '<Root>/ToUint16_2' */\r\n    if (rtb_Sum3_m[2] < 65536.0) {\r\n      if (rtb_Sum3_m[2] >= 0.0) {\r\n        /* Outport: '<Root>/Motor_3' */\r\n        crazyflie_Y.Motor_3 = (uint16_T)rtb_Sum3_m[2];\r\n      } else {\r\n        /* Outport: '<Root>/Motor_3' */\r\n        crazyflie_Y.Motor_3 = 0U;\r\n      }\r\n    } else {\r\n      /* Outport: '<Root>/Motor_3' */\r\n      crazyflie_Y.Motor_3 = MAX_uint16_T;\r\n    }\r\n\r\n    /* End of DataTypeConversion: '<Root>/ToUint16_2' */\r\n\r\n    /* DataTypeConversion: '<Root>/ToUint16_3' */\r\n    if (rtb_Sum3_m[3] < 65536.0) {\r\n      if (rtb_Sum3_m[3] >= 0.0) {\r\n        /* Outport: '<Root>/Motor_4' */\r\n        crazyflie_Y.Motor_4 = (uint16_T)rtb_Sum3_m[3];\r\n      } else {\r\n        /* Outport: '<Root>/Motor_4' */\r\n        crazyflie_Y.Motor_4 = 0U;\r\n      }\r\n    } else {\r\n      /* Outport: '<Root>/Motor_4' */\r\n      crazyflie_Y.Motor_4 = MAX_uint16_T;\r\n    }\r\n\r\n    /* End of DataTypeConversion: '<Root>/ToUint16_3' */\r\n\r\n    /* Update for Delay: '<S2>/Delay' */\r\n    crazyflie_DW.Delay_DSTATE = rtb_Sum3;\r\n\r\n    /* Update for Delay: '<S3>/Delay' */\r\n    crazyflie_DW.Delay_DSTATE_p = rtb_Sum3_l;\r\n  }\r\n\r\n  rate_scheduler();\r\n}\r\n\r\n/* Model initialize function */\r\nvoid crazyflie_initialize(void)\r\n{\r\n  /* (no initialization code required) */\r\n}\r\n\r\n/* Model terminate function */\r\nvoid crazyflie_terminate(void)\r\n{\r\n  /* (no terminate code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"crazyflie.h","type":"header","group":"model","path":"D:\\Chalmers\\Sp4\\SSY191\\BitcrazeSharedFolder\\test\\project2024-13group\\generate_code\\simulink-model\\crazyflie_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: crazyflie.h\r\n *\r\n * Code generated for Simulink model 'crazyflie'.\r\n *\r\n * Model version                  : 9.6\r\n * Simulink Coder version         : 23.2 (R2023b) 01-Aug-2023\r\n * C/C++ source code generated on : Thu May  2 11:48:02 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_crazyflie_h_\r\n#define RTW_HEADER_crazyflie_h_\r\n#ifndef crazyflie_COMMON_INCLUDES_\r\n#define crazyflie_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* crazyflie_COMMON_INCLUDES_ */\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_crazyflie_T RT_MODEL_crazyflie_T;\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real_T Delay_DSTATE;                 /* '<S2>/Delay' */\r\n  real_T Delay_DSTATE_p;               /* '<S3>/Delay' */\r\n} DW_crazyflie_T;\r\n\r\n/* Constant parameters (default storage) */\r\ntypedef struct {\r\n  /* Expression: -K\r\n   * Referenced by: '<Root>/Gain'\r\n   */\r\n  real_T Gain_Gain[20];\r\n} ConstP_crazyflie_T;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real_T Base_Thrust;                  /* '<Root>/Base_Thrust' */\r\n  real_T Ref_Roll;                     /* '<Root>/Ref_Roll' */\r\n  real_T Ref_Pitch;                    /* '<Root>/Ref_Pitch' */\r\n  real_T Ref_YawRate;                  /* '<Root>/Ref_YawRate' */\r\n  real_T Acc_x;                        /* '<Root>/Acc_x' */\r\n  real_T Acc_y;                        /* '<Root>/Acc_y' */\r\n  real_T Acc_z;                        /* '<Root>/Acc_z' */\r\n  real_T Gyro_x;                       /* '<Root>/Gyro_x' */\r\n  real_T Gyro_y;                       /* '<Root>/Gyro_y' */\r\n  real_T Gyro_z;                       /* '<Root>/Gyro_z' */\r\n  int16_T Flow_x;                      /* '<Root>/Flow_x' */\r\n  int16_T Flow_y;                      /* '<Root>/Flow_y' */\r\n} ExtU_crazyflie_T;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  uint16_T Motor_1;                    /* '<Root>/Motor_1' */\r\n  uint16_T Motor_2;                    /* '<Root>/Motor_2' */\r\n  uint16_T Motor_3;                    /* '<Root>/Motor_3' */\r\n  uint16_T Motor_4;                    /* '<Root>/Motor_4' */\r\n  real_T Log1;                         /* '<Root>/Log1' */\r\n  real_T Log2;                         /* '<Root>/Log2' */\r\n  real_T Log3;                         /* '<Root>/Log3' */\r\n  real_T Log4;                         /* '<Root>/Log4' */\r\n  real_T Log5;                         /* '<Root>/Log5' */\r\n  real_T Log6;                         /* '<Root>/Log6' */\r\n} ExtY_crazyflie_T;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_crazyflie_T {\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    struct {\r\n      uint8_T TID[2];\r\n    } TaskCounters;\r\n  } Timing;\r\n};\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW_crazyflie_T crazyflie_DW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU_crazyflie_T crazyflie_U;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY_crazyflie_T crazyflie_Y;\r\n\r\n/* Constant parameters (default storage) */\r\nextern const ConstP_crazyflie_T crazyflie_ConstP;\r\n\r\n/* Model entry point functions */\r\nextern void crazyflie_initialize(void);\r\nextern void crazyflie_step(void);\r\nextern void crazyflie_terminate(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_crazyflie_T *const crazyflie_M;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S1>/Discrete-Time Integrator3' : Unused code path elimination\r\n * Block '<S1>/Discrete-Time Integrator4' : Unused code path elimination\r\n * Block '<S1>/Discrete-Time Integrator5' : Unused code path elimination\r\n * Block '<S1>/Pitch_Gyro1' : Unused code path elimination\r\n * Block '<S1>/Roll_Gyro1' : Unused code path elimination\r\n * Block '<Root>/ToDouble' : Eliminate redundant data type conversion\r\n * Block '<Root>/ToDouble1' : Eliminate redundant data type conversion\r\n * Block '<Root>/ToDouble2' : Eliminate redundant data type conversion\r\n * Block '<Root>/ToDouble3' : Eliminate redundant data type conversion\r\n * Block '<Root>/ToDouble4' : Eliminate redundant data type conversion\r\n * Block '<Root>/ToDouble5' : Eliminate redundant data type conversion\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'crazyflie'\r\n * '<S1>'   : 'crazyflie/Subsystem'\r\n * '<S2>'   : 'crazyflie/Subsystem/ComplementaryFilter2'\r\n * '<S3>'   : 'crazyflie/Subsystem/ComplementaryFilter3'\r\n * '<S4>'   : 'crazyflie/Subsystem/MATLAB Function1'\r\n */\r\n#endif                                 /* RTW_HEADER_crazyflie_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"crazyflie_data.c","type":"source","group":"data","path":"D:\\Chalmers\\Sp4\\SSY191\\BitcrazeSharedFolder\\test\\project2024-13group\\generate_code\\simulink-model\\crazyflie_ert_rtw","tag":"","groupDisplay":"Data files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: crazyflie_data.c\r\n *\r\n * Code generated for Simulink model 'crazyflie'.\r\n *\r\n * Model version                  : 9.6\r\n * Simulink Coder version         : 23.2 (R2023b) 01-Aug-2023\r\n * C/C++ source code generated on : Thu May  2 11:48:02 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"crazyflie.h\"\r\n\r\n/* Constant parameters (default storage) */\r\nconst ConstP_crazyflie_T crazyflie_ConstP = {\r\n  /* Expression: -K\r\n   * Referenced by: '<Root>/Gain'\r\n   */\r\n  { 487.49846965891368, 487.498469658808, -487.49846965891345,\r\n    -487.49846965880715, 489.71944636386979, -489.71944636328453,\r\n    -489.71944636387639, 489.71944636329073, 196.20222487715159,\r\n    196.20222487709555, -196.20222487715105, -196.2022248770956,\r\n    239.19069660439757, -239.19069660393649, -239.19069660440587,\r\n    239.19069660394459, 4.99951928779386, -4.9995192877891244,\r\n    4.9995192877939489, -4.9995192877986829 }\r\n};\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"D:\\Chalmers\\Sp4\\SSY191\\BitcrazeSharedFolder\\test\\project2024-13group\\generate_code\\simulink-model\\crazyflie_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'crazyflie'.\r\n *\r\n * Model version                  : 9.6\r\n * Simulink Coder version         : 23.2 (R2023b) 01-Aug-2023\r\n * C/C++ source code generated on : Thu May  2 11:48:02 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T.                        *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"D:\\Chalmers\\Sp4\\SSY191\\BitcrazeSharedFolder\\test\\project2024-13group\\generate_code\\simulink-model\\crazyflie_ert_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtmodel.h\r\n *\r\n * Code generated for Simulink model 'crazyflie'.\r\n *\r\n * Model version                  : 9.6\r\n * Simulink Coder version         : 23.2 (R2023b) 01-Aug-2023\r\n * C/C++ source code generated on : Thu May  2 11:48:02 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rtmodel_h_\r\n#define RTW_HEADER_rtmodel_h_\r\n#include \"crazyflie.h\"\r\n\r\n/* Macros generated for backwards compatibility  */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((void*) 0)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((void) 0)\r\n#endif\r\n\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((void*) 0)\r\n#endif\r\n#endif                                 /* RTW_HEADER_rtmodel_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"crazyflieModel.c","type":"source","group":"","path":"D:\\Chalmers\\Sp4\\SSY191\\BitcrazeSharedFolder\\test\\project2024-13group\\generate_code\\simulink-model\\crazyflie_ert_rtw","tag":"","groupDisplay":"Other files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: crazyflieModel.c\r\n *\r\n * Code generated for Simulink model 'crazyflie'.\r\n *\r\n * Model version                  : 9.6\r\n * Simulink Coder version         : 23.2 (R2023b) 01-Aug-2023\r\n * C/C++ source code generated on : Thu May  2 11:48:02 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#define DEBUG_MODULE                   \"STAB\"\r\n#include <math.h>\r\n#include \"FreeRTOS.h\"\r\n#include \"task.h\"\r\n#include \"system.h\"\r\n#include \"log.h\"\r\n#include \"param.h\"\r\n#include \"debug.h\"\r\n#include \"motors.h\"\r\n#include \"pm.h\"\r\n#include \"crazyflie.h\"\r\n#include \"crazyflieModel.h\"\r\n#include \"sensors.h\"\r\n#include \"commander.h\"\r\n#include \"crtp_commander_high_level.h\"\r\n#include \"crtp_localization_service.h\"\r\n#include \"controller.h\"\r\n#include \"power_distribution.h\"\r\n#include \"collision_avoidance.h\"\r\n#include \"health.h\"\r\n#include \"supervisor.h\"\r\n#include \"estimator.h\"\r\n#include \"usddeck.h\"\r\n#include \"quatcompress.h\"\r\n#include \"statsCnt.h\"\r\n#include \"static_mem.h\"\r\n#include \"rateSupervisor.h\"\r\n\r\nstatic bool isInit;\r\nstatic bool emergencyStop = false;\r\nstatic int emergencyStopTimeout = EMERGENCY_STOP_TIMEOUT_DISABLED;\r\nstatic uint32_t inToOutLatency;\r\n\r\n// State variables for the stabilizer\r\nstatic setpoint_t setpoint;\r\nstatic sensorData_t sensorData;\r\nstatic state_t state;\r\nstatic control_t control;\r\n\r\n// For scratch storage - never logged or passed to other subsystems.\r\n//static setpoint_t tempSetpoint;\r\nstatic StateEstimatorType estimatorType;\r\nstatic ControllerType controllerType;\r\nstatic STATS_CNT_RATE_DEFINE(stabilizerRate, 500);\r\nstatic rateSupervisor_t rateSupervisorContext;\r\nstatic bool rateWarningDisplayed = false;\r\n\r\n// SSY191\r\nstatic float l1, l2, l3, l4, l5, l6;\r\nstatic uint16_t m1, m2, m3, m4;\r\nSTATIC_MEM_TASK_ALLOC(crazyflieModelTask, CRAZYFLIEMODEL_TASK_STACKSIZE);\r\nstatic void crazyflieModelTask(void* param);\r\nstatic void calcSensorToOutputLatency(const sensorData_t *sensorData)\r\n{\r\n  uint64_t outTimestamp = usecTimestamp();\r\n  inToOutLatency = outTimestamp - sensorData->interruptTimestamp;\r\n}\r\n\r\nvoid crazyflieModelInit(StateEstimatorType estimator)\r\n{\r\n  if (isInit)\r\n    return;\r\n  crazyflie_initialize();\r\n  sensorsInit();\r\n  stateEstimatorInit(estimator);\r\n  controllerInit(ControllerTypeAny);\r\n  powerDistributionInit();\r\n  collisionAvoidanceInit();\r\n  estimatorType = getStateEstimator();\r\n  controllerType = getControllerType();\r\n  crazyflie_initialize();\r\n  STATIC_MEM_TASK_CREATE(crazyflieModelTask, crazyflieModelTask,\r\n    CRAZYFLIEMODEL_TASK_NAME, NULL, CRAZYFLIEMODEL_TASK_PRI);\r\n  isInit = true;\r\n}\r\n\r\nbool crazyflieModelTest(void)\r\n{\r\n  bool pass = true;\r\n  pass &= sensorsTest();\r\n  pass &= stateEstimatorTest();\r\n  pass &= controllerTest();\r\n  pass &= powerDistributionTest();\r\n  pass &= collisionAvoidanceTest();\r\n  return pass;\r\n}\r\n\r\nstatic void checkEmergencyStopTimeout()\r\n{\r\n  if (emergencyStopTimeout >= 0) {\r\n    emergencyStopTimeout -= 1;\r\n    if (emergencyStopTimeout == 0) {\r\n      emergencyStop = true;\r\n    }\r\n  }\r\n}\r\n\r\n/* The stabilizer loop runs at 1kHz (stock) or 500Hz (kalman). It is the\r\n * responsibility of the different functions to run slower by skipping call\r\n * (ie. returning without modifying the output structure).\r\n */\r\nstatic void crazyflieModelTask(void* param)\r\n{\r\n  uint32_t tick;\r\n  uint32_t lastWakeTime;\r\n  vTaskSetApplicationTaskTag(0, (void*)TASK_STABILIZER_ID_NBR);\r\n\r\n  //Wait for the system to be fully started to start stabilization loop\r\n  systemWaitStart();\r\n  DEBUG_PRINT(\"Wait for sensor calibration...\\n\");\r\n\r\n  // Wait for sensors to be calibrated\r\n  lastWakeTime = xTaskGetTickCount();\r\n  while (!sensorsAreCalibrated()) {\r\n    vTaskDelayUntil(&lastWakeTime, F2T(RATE_MAIN_LOOP));\r\n  }\r\n\r\n  // Initialize tick to something else then 0\r\n  tick = 1;\r\n  rateSupervisorInit(&rateSupervisorContext, xTaskGetTickCount(), M2T(1000), 997,\r\n                     1003, 1);\r\n  DEBUG_PRINT(\"Ready to fly.\\n\");\r\n  while (1) {\r\n    // The sensor should unlock at 1kHz\r\n    sensorsWaitDataReady();\r\n\r\n    // update sensorData struct (for logging variables)\r\n    sensorsAcquire(&sensorData, tick);\r\n    if (healthShallWeRunTest()) {\r\n      healthRunTests(&sensorData);\r\n    } else {\r\n      stateEstimator(&state, tick);\r\n      commanderGetSetpoint(&setpoint, &state);\r\n      crazyflie_U.Acc_x = sensorData.acc.x;\r\n      crazyflie_U.Acc_y = sensorData.acc.y;\r\n      crazyflie_U.Acc_z = sensorData.acc.z;\r\n      crazyflie_U.Gyro_x = sensorData.gyro.x;\r\n      crazyflie_U.Gyro_y = sensorData.gyro.y;\r\n      crazyflie_U.Gyro_z = sensorData.gyro.z;\r\n      crazyflie_U.Base_Thrust = setpoint.thrust;\r\n      crazyflie_U.Ref_Roll = setpoint.attitude.roll;\r\n      crazyflie_U.Ref_Pitch = setpoint.attitude.pitch;\r\n      crazyflie_U.Ref_YawRate = setpoint.attitudeRate.yaw;\r\n\r\n      //DEBUG_PRINT(\"Acc Y: %f\\n\", sensorData.acc.y);\r\n      crazyflie_step();\r\n\r\n      /* Get model outputs here */\r\n      l1 = crazyflie_Y.Log1;\r\n      l2 = crazyflie_Y.Log2;\r\n      l3 = crazyflie_Y.Log3;\r\n      l4 = crazyflie_Y.Log4;\r\n      l5 = crazyflie_Y.Log5;\r\n      l6 = crazyflie_Y.Log6;\r\n      m1 = (uint16_t)crazyflie_Y.Motor_1;\r\n      m2 = (uint16_t)crazyflie_Y.Motor_2;\r\n      m3 = (uint16_t)crazyflie_Y.Motor_3;\r\n      m4 = (uint16_t)crazyflie_Y.Motor_4;\r\n      checkEmergencyStopTimeout();\r\n\r\n      //\r\n      // The supervisor module keeps track of Crazyflie state such as if\r\n      // we are ok to fly, or if the Crazyflie is in flight.\r\n      //\r\n      supervisorUpdate(&sensorData);\r\n      if (emergencyStop || (systemIsArmed() == false)) {\r\n        powerStop();\r\n      } else {\r\n        motorsSetRatio(MOTOR_M1, m1);\r\n        motorsSetRatio(MOTOR_M2, m2);\r\n        motorsSetRatio(MOTOR_M3, m3);\r\n        motorsSetRatio(MOTOR_M4, m4);\r\n      }\r\n\r\n#ifdef CONFIG_DECK_USD\r\n\r\n      // Log data to uSD card if configured\r\n      if (usddeckLoggingEnabled()\r\n          && usddeckLoggingMode() == usddeckLoggingMode_SynchronousStabilizer\r\n          && RATE_DO_EXECUTE(usddeckFrequency(), tick)) {\r\n        usddeckTriggerLogging();\r\n      }\r\n\r\n#endif\r\n\r\n      calcSensorToOutputLatency(&sensorData);\r\n      tick++;\r\n      STATS_CNT_RATE_EVENT(&stabilizerRate);\r\n      if (!rateSupervisorValidate(&rateSupervisorContext, xTaskGetTickCount()))\r\n      {\r\n        if (!rateWarningDisplayed) {\r\n          DEBUG_PRINT(\"WARNING: stabilizer loop rate is off (%lu)\\n\",\r\n                      rateSupervisorLatestCount(&rateSupervisorContext));\r\n          rateWarningDisplayed = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nvoid stabilizerSetEmergencyStop()\r\n{\r\n  emergencyStop = true;\r\n}\r\n\r\nvoid stabilizerResetEmergencyStop()\r\n{\r\n  emergencyStop = false;\r\n}\r\n\r\nvoid stabilizerSetEmergencyStopTimeout(int timeout)\r\n{\r\n  emergencyStop = false;\r\n  emergencyStopTimeout = timeout;\r\n}\r\n\r\n/**\r\n * Parameters to set the estimator and controller type\r\n * for the stabilizer module, or to do an emergency stop\r\n */\r\nPARAM_GROUP_START(stabilizer)\r\n/**\r\n * @brief Estimator type Any(0), complementary(1), kalman(2) (Default: 0)\r\n */\r\n  PARAM_ADD_CORE(PARAM_UINT8, estimator, &estimatorType)\r\n/**\r\n * @brief Controller type Any(0), PID(1), Mellinger(2), INDI(3) (Default: 0)\r\n */\r\n  PARAM_ADD_CORE(PARAM_UINT8, controller, &controllerType)\r\n/**\r\n * @brief If set to nonzero will turn off power\r\n */\r\n  PARAM_ADD_CORE(PARAM_UINT8, stop, &emergencyStop)\r\n  PARAM_GROUP_STOP(stabilizer)\r\n/**\r\n * Log group for the current controller target\r\n *\r\n * Note: all members may not be updated depending on how the system is used\r\n */\r\n  LOG_GROUP_START(ctrltarget)\r\n/**\r\n * @brief Desired position X [m]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, x, &setpoint.position.x)\r\n/**\r\n * @brief Desired position Y [m]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, y, &setpoint.position.y)\r\n/**\r\n * @brief Desired position X [m]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, z, &setpoint.position.z)\r\n/**\r\n * @brief Desired velocity X [m/s]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, vx, &setpoint.velocity.x)\r\n/**\r\n * @brief Desired velocity Y [m/s]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, vy, &setpoint.velocity.y)\r\n/**\r\n * @brief Desired velocity Z [m/s]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, vz, &setpoint.velocity.z)\r\n/**\r\n * @brief Desired acceleration X [m/s^2]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, ax, &setpoint.acceleration.x)\r\n/**\r\n * @brief Desired acceleration Y [m/s^2]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, ay, &setpoint.acceleration.y)\r\n/**\r\n * @brief Desired acceleration Z [m/s^2]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, az, &setpoint.acceleration.z)\r\n/**\r\n * @brief Desired attitude, roll [deg]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, roll, &setpoint.attitude.roll)\r\n/**\r\n * @brief Desired attitude, pitch [deg]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, pitch, &setpoint.attitude.pitch)\r\n/**\r\n * @brief Desired attitude rate, yaw rate [deg/s]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, yaw, &setpoint.attitudeRate.yaw)\r\n  LOG_GROUP_STOP(ctrltarget)\r\n/**\r\n * Logs to set the estimator and controller type\r\n * for the stabilizer module\r\n */\r\n  LOG_GROUP_START(stabilizer)\r\n/**\r\n * @brief Estimated roll\r\n *   Note: Same as stateEstimate.roll\r\n */\r\n  LOG_ADD(LOG_FLOAT, roll, &state.attitude.roll)\r\n/**\r\n * @brief Estimated pitch\r\n *   Note: Same as stateEstimate.pitch\r\n */\r\n  LOG_ADD(LOG_FLOAT, pitch, &state.attitude.pitch)\r\n/**\r\n * @brief Estimated yaw\r\n *   Note: same as stateEstimate.yaw\r\n */\r\n  LOG_ADD(LOG_FLOAT, yaw, &state.attitude.yaw)\r\n/**\r\n * @brief Current thrust\r\n */\r\n  LOG_ADD(LOG_FLOAT, thrust, &control.thrust)\r\n/**\r\n * @brief Rate of stabilizer loop\r\n */\r\n  STATS_CNT_RATE_LOG_ADD(rtStab, &stabilizerRate)\r\n/**\r\n * @brief Latency from sampling of sensor to motor output\r\n *    Note: Used for debugging but could also be used as a system test\r\n */\r\n  LOG_ADD(LOG_UINT32, intToOut, &inToOutLatency)\r\n  LOG_GROUP_STOP(stabilizer)\r\n/**\r\n * Log group for accelerometer sensor measurement, based on body frame.\r\n * Compensated for a miss-alignment by gravity at startup.\r\n *\r\n * For data on measurement noise please see information from the sensor\r\n * manufacturer. To see what accelerometer sensor is in your Crazyflie or Bolt\r\n * please check documentation on the Bitcraze webpage or check the parameter\r\n * group `imu_sensors`.\r\n */\r\n  LOG_GROUP_START(acc)\r\n/**\r\n * @brief Acceleration in X [Gs]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, x, &sensorData.acc.x)\r\n/**\r\n * @brief Acceleration in Y [Gs]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, y, &sensorData.acc.y)\r\n/**\r\n * @brief Acceleration in Z [Gs]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, z, &sensorData.acc.z)\r\n  LOG_GROUP_STOP(acc)\r\n#ifdef LOG_SEC_IMU\r\n  LOG_GROUP_START(accSec)\r\n  LOG_ADD(LOG_FLOAT, x, &sensorData.accSec.x)\r\n  LOG_ADD(LOG_FLOAT, y, &sensorData.accSec.y)\r\n  LOG_ADD(LOG_FLOAT, z, &sensorData.accSec.z)\r\n  LOG_GROUP_STOP(accSec)\r\n#endif\r\n/**\r\n * Log group for the barometer.\r\n *\r\n * For data on measurement noise please see information from the sensor\r\n * manufacturer. To see what barometer sensor is in your Crazyflie or Bolt\r\n * please check documentation on the Bitcraze webpage or check the parameter\r\n * group `imu_sensors`.\r\n */\r\n  LOG_GROUP_START(baro)\r\n/**\r\n * @brief Altitude above Sea Level [m]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, asl, &sensorData.baro.asl)\r\n/**\r\n * @brief Temperature [degrees Celsius]\r\n */\r\n  LOG_ADD(LOG_FLOAT, temp, &sensorData.baro.temperature)\r\n/**\r\n * @brief Air preassure [mbar]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, pressure, &sensorData.baro.pressure)\r\n  LOG_GROUP_STOP(baro)\r\n/**\r\n * Log group for gyroscopes.\r\n *\r\n * For data on measurement noise please see information from the sensor\r\n * manufacturer. To see what gyroscope sensor is in your Crazyflie or Bolt\r\n * please check documentation on the Bitcraze webpage or check the parameter\r\n * group `imu_sensors`.\r\n */\r\n  LOG_GROUP_START(gyro)\r\n/**\r\n * @brief Angular velocity (rotation) around the X-axis, after filtering [deg/s]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, x, &sensorData.gyro.x)\r\n/**\r\n * @brief Angular velocity (rotation) around the Y-axis, after filtering [deg/s]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, y, &sensorData.gyro.y)\r\n/**\r\n * @brief Angular velocity (rotation) around the Z-axis, after filtering [deg/s]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, z, &sensorData.gyro.z)\r\n  LOG_GROUP_STOP(gyro)\r\n#ifdef LOG_SEC_IMU\r\n  LOG_GROUP_START(gyroSec)\r\n  LOG_ADD(LOG_FLOAT, x, &sensorData.gyroSec.x)\r\n  LOG_ADD(LOG_FLOAT, y, &sensorData.gyroSec.y)\r\n  LOG_ADD(LOG_FLOAT, z, &sensorData.gyroSec.z)\r\n  LOG_GROUP_STOP(gyroSec)\r\n#endif\r\n/**\r\n * Log group for magnetometer.\r\n *\r\n * Currently only present on Crazyflie 2.0\r\n */\r\n  LOG_GROUP_START(mag)\r\n/**\r\n * @brief Magnetometer X axis, after filtering [gauss]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, x, &sensorData.mag.x)\r\n/**\r\n * @brief Magnetometer Y axis, after filtering [gauss]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, y, &sensorData.mag.y)\r\n/**\r\n * @brief Magnetometer Z axis, after filtering [gauss]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, z, &sensorData.mag.z)\r\n  LOG_GROUP_STOP(mag)\r\n  LOG_GROUP_START(controller)\r\n  LOG_ADD(LOG_INT16, ctr_yaw, &control.yaw)\r\n  LOG_GROUP_STOP(controller)\r\n/**\r\n * Log group for the state estimator, the currently estimated state of the platform.\r\n *\r\n * Note: all values may not be updated depending on which estimator that is used.\r\n */\r\n  LOG_GROUP_START(stateEstimate)\r\n/**\r\n * @brief The estimated position of the platform in the global reference frame, X [m]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, x, &state.position.x)\r\n/**\r\n * @brief The estimated position of the platform in the global reference frame, Y [m]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, y, &state.position.y)\r\n/**\r\n * @brief The estimated position of the platform in the global reference frame, Z [m]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, z, &state.position.z)\r\n/**\r\n * @brief The velocity of the Crazyflie in the global reference frame, X [m/s]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, vx, &state.velocity.x)\r\n/**\r\n * @brief The velocity of the Crazyflie in the global reference frame, Y [m/s]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, vy, &state.velocity.y)\r\n/**\r\n * @brief The velocity of the Crazyflie in the global reference frame, Z [m/s]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, vz, &state.velocity.z)\r\n/**\r\n * @brief The acceleration of the Crazyflie in the global reference frame, X [Gs]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, ax, &state.acc.x)\r\n/**\r\n * @brief The acceleration of the Crazyflie in the global reference frame, Y [Gs]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, ay, &state.acc.y)\r\n/**\r\n * @brief The acceleration of the Crazyflie in the global reference frame, without considering gravity, Z [Gs]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, az, &state.acc.z)\r\n/**\r\n * @brief Attitude, roll angle [deg]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, roll, &state.attitude.roll)\r\n/**\r\n * @brief Attitude, pitch angle (legacy CF2 body coordinate system, where pitch is inverted) [deg]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, pitch, &state.attitude.pitch)\r\n/**\r\n * @brief Attitude, yaw angle [deg]\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, yaw, &state.attitude.yaw)\r\n/**\r\n * @brief Attitude as a quaternion, x\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, qx, &state.attitudeQuaternion.x)\r\n/**\r\n * @brief Attitude as a quaternion, y\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, qy, &state.attitudeQuaternion.y)\r\n/**\r\n * @brief Attitude as a quaternion, z\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, qz, &state.attitudeQuaternion.z)\r\n/**\r\n * @brief Attitude as a quaternion, w\r\n */\r\n  LOG_ADD_CORE(LOG_FLOAT, qw, &state.attitudeQuaternion.w)\r\n  LOG_GROUP_STOP(stateEstimate)\r\n/* SSY191: Add Simulink plots\r\n */\r\n  LOG_GROUP_START(simulink)\r\n  LOG_ADD(LOG_FLOAT, log_1, &l1)\r\n  LOG_ADD(LOG_FLOAT, log_2, &l2)\r\n  LOG_ADD(LOG_FLOAT, log_3, &l3)\r\n  LOG_ADD(LOG_FLOAT, log_4, &l4)\r\n  LOG_ADD(LOG_FLOAT, log_5, &l5)\r\n  LOG_ADD(LOG_FLOAT, log_6, &l6)\r\n  LOG_GROUP_STOP(simulink)\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"crazyflieModel.h","type":"header","group":"","path":"D:\\Chalmers\\Sp4\\SSY191\\BitcrazeSharedFolder\\test\\project2024-13group\\generate_code\\simulink-model\\crazyflie_ert_rtw","tag":"","groupDisplay":"Other files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: crazyflieModel.h\r\n *\r\n * Code generated for Simulink model 'crazyflie'.\r\n *\r\n * Model version                  : 9.6\r\n * Simulink Coder version         : 23.2 (R2023b) 01-Aug-2023\r\n * C/C++ source code generated on : Thu May  2 11:48:02 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_crazyflieModel_h_\r\n#define RTW_HEADER_crazyflieModel_h_\r\n#include <stdbool.h>\r\n#include <stdint.h>\r\n#define EMERGENCY_STOP_TIMEOUT_DISABLED (-1)\r\n\r\nvoid crazyflieModelInit(StateEstimatorType estimator);\r\nbool crazyflieModelTest(void);\r\n\r\n#endif                                 /* RTW_HEADER_crazyflieModel_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"trace":"{\"model\":\"crazyflie\",\"sources\":[\"crazyflie.c\",\"crazyflie.h\"],\"categoricalProps\":[\"ModelElemCategory\",\"StorageClass\"],\"categoricalValues\":[\"InternalData\",\"Default\",\"Constants\",\"Inports\",\"Outports\"],\"sidPrefixes\":[\"crazyflie\"],\"fileRecords\":{\"1\":{\"records\":[{\"tk\":[34,3,34,9],\"els\":[\"1:332\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[34,10,34,22],\"els\":[\"1:332\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[34,22,34,23],\"els\":[\"1:332\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[35,3,35,9],\"els\":[\"1:346\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[35,10,35,24],\"els\":[\"1:346\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[35,24,35,25],\"els\":[\"1:346\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[43,3,43,9],\"els\":[\"1:380\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[43,10,43,19],\"els\":[\"1:380\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[43,19,43,20],\"els\":[\"1:380\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[43,20,43,22],\"els\":[\"1:380\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[43,22,43,23],\"els\":[\"1:380\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[43,23,43,24],\"els\":[\"1:380\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[48,3,48,9],\"els\":[\"1:11\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[48,10,48,21],\"els\":[\"1:11\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[48,21,48,22],\"els\":[\"1:11\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[49,3,49,9],\"els\":[\"1:12\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[49,10,49,18],\"els\":[\"1:12\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[49,18,49,19],\"els\":[\"1:12\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[50,3,50,9],\"els\":[\"1:13\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[50,10,50,19],\"els\":[\"1:13\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[50,19,50,20],\"els\":[\"1:13\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[51,3,51,9],\"els\":[\"1:172\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[51,10,51,21],\"els\":[\"1:172\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[51,21,51,22],\"els\":[\"1:172\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[52,3,52,9],\"els\":[\"1:5\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[52,10,52,15],\"els\":[\"1:5\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[52,15,52,16],\"els\":[\"1:5\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[53,3,53,9],\"els\":[\"1:6\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[53,10,53,15],\"els\":[\"1:6\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[53,15,53,16],\"els\":[\"1:6\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[54,3,54,9],\"els\":[\"1:7\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[54,10,54,15],\"els\":[\"1:7\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[54,15,54,16],\"els\":[\"1:7\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[55,3,55,9],\"els\":[\"1:8\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[55,10,55,16],\"els\":[\"1:8\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[55,16,55,17],\"els\":[\"1:8\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[56,3,56,9],\"els\":[\"1:9\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[56,10,56,16],\"els\":[\"1:9\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[56,16,56,17],\"els\":[\"1:9\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[57,3,57,9],\"els\":[\"1:10\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[57,10,57,16],\"els\":[\"1:10\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[57,16,57,17],\"els\":[\"1:10\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[58,3,58,10],\"els\":[\"1:254\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[58,11,58,17],\"els\":[\"1:254\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[58,17,58,18],\"els\":[\"1:254\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[59,3,59,10],\"els\":[\"1:255\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[59,11,59,17],\"els\":[\"1:255\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[59,17,59,18],\"els\":[\"1:255\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[64,3,64,11],\"els\":[\"1:51\"],\"ct\":{\"0\":4,\"1\":1}},{\"tk\":[64,12,64,19],\"els\":[\"1:51\"],\"ct\":{\"0\":4,\"1\":1}},{\"tk\":[64,19,64,20],\"els\":[\"1:51\"],\"ct\":{\"0\":4,\"1\":1}},{\"tk\":[65,3,65,11],\"els\":[\"1:52\"],\"ct\":{\"0\":4,\"1\":1}},{\"tk\":[65,12,65,19],\"els\":[\"1:52\"],\"ct\":{\"1\":1,\"0\":4}},{\"tk\":[65,19,65,20],\"els\":[\"1:52\"],\"ct\":{\"1\":1,\"0\":4}},{\"tk\":[66,3,66,11],\"els\":[\"1:53\"],\"ct\":{\"1\":1,\"0\":4}},{\"tk\":[66,12,66,19],\"els\":[\"1:53\"],\"ct\":{\"0\":4,\"1\":1}},{\"tk\":[66,19,66,20],\"els\":[\"1:53\"],\"ct\":{\"1\":1,\"0\":4}},{\"tk\":[67,3,67,11],\"els\":[\"1:54\"],\"ct\":{\"0\":4,\"1\":1}},{\"tk\":[67,12,67,19],\"els\":[\"1:54\"],\"ct\":{\"0\":4,\"1\":1}},{\"tk\":[67,19,67,20],\"els\":[\"1:54\"],\"ct\":{\"0\":4,\"1\":1}},{\"tk\":[68,3,68,9],\"els\":[\"1:55\"],\"ct\":{\"0\":4,\"1\":1}},{\"tk\":[68,10,68,14],\"els\":[\"1:55\"],\"ct\":{\"0\":4,\"1\":1}},{\"tk\":[68,14,68,15],\"els\":[\"1:55\"],\"ct\":{\"1\":1,\"0\":4}},{\"tk\":[69,3,69,9],\"els\":[\"1:56\"],\"ct\":{\"0\":4,\"1\":1}},{\"tk\":[69,10,69,14],\"els\":[\"1:56\"],\"ct\":{\"0\":4,\"1\":1}},{\"tk\":[69,14,69,15],\"els\":[\"1:56\"],\"ct\":{\"0\":4,\"1\":1}},{\"tk\":[70,3,70,9],\"els\":[\"1:78\"],\"ct\":{\"1\":1,\"0\":4}},{\"tk\":[70,10,70,14],\"els\":[\"1:78\"],\"ct\":{\"1\":1,\"0\":4}},{\"tk\":[70,14,70,15],\"els\":[\"1:78\"],\"ct\":{\"0\":4,\"1\":1}},{\"tk\":[71,3,71,9],\"els\":[\"1:182\"],\"ct\":{\"0\":4,\"1\":1}},{\"tk\":[71,10,71,14],\"els\":[\"1:182\"],\"ct\":{\"0\":4,\"1\":1}},{\"tk\":[71,14,71,15],\"els\":[\"1:182\"],\"ct\":{\"1\":1,\"0\":4}},{\"tk\":[72,3,72,9],\"els\":[\"1:183\"],\"ct\":{\"0\":4,\"1\":1}},{\"tk\":[72,10,72,14],\"els\":[\"1:183\"],\"ct\":{\"1\":1,\"0\":4}},{\"tk\":[72,14,72,15],\"els\":[\"1:183\"],\"ct\":{\"0\":4,\"1\":1}},{\"tk\":[73,3,73,9],\"els\":[\"1:184\"],\"ct\":{\"1\":1,\"0\":4}},{\"tk\":[73,10,73,14],\"els\":[\"1:184\"],\"ct\":{\"0\":4,\"1\":1}},{\"tk\":[73,14,73,15],\"els\":[\"1:184\"],\"ct\":{\"1\":1,\"0\":4}}]},\"0\":{\"records\":[{\"tk\":[81,5,81,13],\"els\":[\"0:340#out:1\"]},{\"tk\":[81,14,81,15],\"els\":[\"0:340\"]},{\"tk\":[81,17,81,21],\"els\":[\"0:334\",\"0:337\"]},{\"tk\":[81,22,81,23],\"els\":[\"0:334\"]},{\"tk\":[81,24,81,35],\"els\":[\"0:8\"]},{\"tk\":[81,36,81,42],\"els\":[\"0:8\"]},{\"tk\":[81,43,81,44],\"els\":[\"0:339\"]},{\"tk\":[81,45,81,57],\"els\":[\"0:332\"]},{\"tk\":[81,58,81,70],\"els\":[\"0:332\"]},{\"tk\":[81,72,81,73],\"els\":[\"0:335\"]},{\"tk\":[81,74,81,77],\"els\":[\"0:335\",\"0:333\"]},{\"tk\":[81,78,81,79],\"els\":[\"0:340\"]},{\"tk\":[82,7,82,12],\"els\":[\"0:327\"]},{\"tk\":[82,13,82,24],\"els\":[\"0:6\"]},{\"tk\":[82,25,82,30],\"els\":[\"0:6\"]},{\"tk\":[82,32,82,43],\"els\":[\"0:7\"]},{\"tk\":[82,44,82,49],\"els\":[\"0:7\"]},{\"tk\":[82,51,82,52],\"els\":[\"0:336\"]},{\"tk\":[82,53,82,56],\"els\":[\"0:336\"]},{\"tk\":[102,5,102,15],\"els\":[\"0:354#out:1\"]},{\"tk\":[102,16,102,17],\"els\":[\"0:354\"]},{\"tk\":[102,18,102,23],\"els\":[\"0:326\"]},{\"tk\":[102,24,102,25],\"els\":[\"0:359\"]},{\"tk\":[102,25,102,36],\"els\":[\"0:5\"]},{\"tk\":[102,37,102,42],\"els\":[\"0:5\"]},{\"tk\":[102,44,102,48],\"els\":[\"0:360:27-40\",\"0:360\",\"0:360::29\"]},{\"tk\":[102,49,102,60],\"els\":[\"0:6\"]},{\"tk\":[102,61,102,66],\"els\":[\"0:6\"]},{\"tk\":[102,67,102,68],\"els\":[\"0:360:32-35\",\"0:360\",\"0:360::29\"]},{\"tk\":[103,7,103,18],\"els\":[\"0:6\"]},{\"tk\":[103,19,103,24],\"els\":[\"0:6\"]},{\"tk\":[103,25,103,26],\"els\":[\"0:360:32-39\",\"0:360\",\"0:360::29\"]},{\"tk\":[103,27,103,38],\"els\":[\"0:7\"]},{\"tk\":[103,39,103,44],\"els\":[\"0:7\"]},{\"tk\":[103,45,103,46],\"els\":[\"0:360:36-39\",\"0:360\",\"0:360::29\"]},{\"tk\":[103,47,103,58],\"els\":[\"0:7\"]},{\"tk\":[103,59,103,64],\"els\":[\"0:7\"]},{\"tk\":[103,67,103,68],\"els\":[\"0:350\"]},{\"tk\":[103,69,103,72],\"els\":[\"0:350\"]},{\"tk\":[103,73,103,74],\"els\":[\"0:354\"]},{\"tk\":[103,76,103,80],\"els\":[\"0:348\",\"0:351\"]},{\"tk\":[103,81,103,82],\"els\":[\"0:348\"]},{\"tk\":[104,7,104,18],\"els\":[\"0:9\"]},{\"tk\":[104,19,104,25],\"els\":[\"0:9\"]},{\"tk\":[104,26,104,27],\"els\":[\"0:353\"]},{\"tk\":[104,28,104,40],\"els\":[\"0:346\"]},{\"tk\":[104,41,104,55],\"els\":[\"0:346\"]},{\"tk\":[104,57,104,58],\"els\":[\"0:349\"]},{\"tk\":[104,59,104,62],\"els\":[\"0:349\",\"0:347\"]},{\"tk\":[119,5,119,8],\"els\":[\"0:380\"]},{\"tk\":[119,8,119,9],\"els\":[\"0:380\"]},{\"tk\":[119,9,119,10],\"els\":[\"0:380\"]},{\"tk\":[119,12,119,13],\"els\":[\"0:380\"]},{\"tk\":[119,14,119,32],\"els\":[\"0:376\",\"0:393\"]},{\"tk\":[119,33,119,34],\"els\":[\"0:376\",\"0:393\"]},{\"tk\":[119,35,119,43],\"els\":[\"0:340#out:1\"]},{\"tk\":[119,44,119,45],\"els\":[\"0:376\"]},{\"tk\":[119,46,119,57],\"els\":[\"0:12\"]},{\"tk\":[119,58,119,66],\"els\":[\"0:12\"]},{\"tk\":[120,5,120,8],\"els\":[\"0:380\"]},{\"tk\":[120,8,120,9],\"els\":[\"0:380\"]},{\"tk\":[120,9,120,10],\"els\":[\"0:380\"]},{\"tk\":[120,12,120,13],\"els\":[\"0:380\"]},{\"tk\":[120,14,120,32],\"els\":[\"0:377\",\"0:394\"]},{\"tk\":[120,33,120,34],\"els\":[\"0:377\",\"0:394\"]},{\"tk\":[120,35,120,45],\"els\":[\"0:354#out:1\"]},{\"tk\":[120,46,120,47],\"els\":[\"0:377\"]},{\"tk\":[120,48,120,59],\"els\":[\"0:13\"]},{\"tk\":[120,60,120,69],\"els\":[\"0:13\"]},{\"tk\":[121,5,121,8],\"els\":[\"0:380\"]},{\"tk\":[121,8,121,9],\"els\":[\"0:380\"]},{\"tk\":[121,9,121,10],\"els\":[\"0:380\"]},{\"tk\":[121,12,121,13],\"els\":[\"0:380\"]},{\"tk\":[121,14,121,25],\"els\":[\"0:8\"]},{\"tk\":[121,26,121,32],\"els\":[\"0:8\"]},{\"tk\":[122,5,122,8],\"els\":[\"0:380\"]},{\"tk\":[122,8,122,9],\"els\":[\"0:380\"]},{\"tk\":[122,9,122,10],\"els\":[\"0:380\"]},{\"tk\":[122,12,122,13],\"els\":[\"0:380\"]},{\"tk\":[122,14,122,25],\"els\":[\"0:9\"]},{\"tk\":[122,26,122,32],\"els\":[\"0:9\"]},{\"tk\":[123,5,123,8],\"els\":[\"0:380\"]},{\"tk\":[123,8,123,9],\"els\":[\"0:380\"]},{\"tk\":[123,9,123,10],\"els\":[\"0:380\"]},{\"tk\":[123,12,123,13],\"els\":[\"0:380\"]},{\"tk\":[123,14,123,25],\"els\":[\"0:10\"]},{\"tk\":[123,26,123,32],\"els\":[\"0:10\"]},{\"tk\":[123,33,123,34],\"els\":[\"0:378\"]},{\"tk\":[123,35,123,46],\"els\":[\"0:172\"]},{\"tk\":[123,47,123,58],\"els\":[\"0:172\"]},{\"tk\":[129,5,129,8],\"els\":[\"0:382\"]},{\"tk\":[129,10,129,11],\"els\":[\"0:380\"]},{\"tk\":[129,14,129,15],\"els\":[\"0:382\"]},{\"tk\":[129,17,129,18],\"els\":[\"0:380\"]},{\"tk\":[129,21,129,22],\"els\":[\"0:382\"]},{\"tk\":[129,24,129,25],\"els\":[\"0:380\"]},{\"tk\":[129,25,129,27],\"els\":[\"0:382\"]},{\"tk\":[130,7,130,12],\"els\":[\"0:382\"]},{\"tk\":[130,13,130,14],\"els\":[\"0:382\"]},{\"tk\":[130,15,130,18],\"els\":[\"0:382\"]},{\"tk\":[131,7,131,10],\"els\":[\"0:382\"]},{\"tk\":[131,12,131,15],\"els\":[\"0:380\"]},{\"tk\":[131,18,131,19],\"els\":[\"0:382\"]},{\"tk\":[131,21,131,24],\"els\":[\"0:380\"]},{\"tk\":[131,27,131,28],\"els\":[\"0:382\"]},{\"tk\":[131,30,131,33],\"els\":[\"0:380\"]},{\"tk\":[131,33,131,35],\"els\":[\"0:382\"]},{\"tk\":[132,9,132,14],\"els\":[\"0:382\"]},{\"tk\":[132,15,132,17],\"els\":[\"0:382\"]},{\"tk\":[132,18,132,34],\"els\":[\"0:382\",\"0:380\"]},{\"tk\":[132,35,132,44],\"els\":[\"0:382\",\"0:380\"]},{\"tk\":[132,44,132,45],\"els\":[\"0:382\",\"0:380\"]},{\"tk\":[132,46,132,49],\"els\":[\"0:380\"]},{\"tk\":[132,50,132,52],\"els\":[\"0:382\",\"0:380\"]},{\"tk\":[132,53,132,54],\"els\":[\"0:382\",\"0:380\"]},{\"tk\":[132,56,132,57],\"els\":[\"0:382\",\"0:380\"]},{\"tk\":[132,58,132,59],\"els\":[\"0:380\"]},{\"tk\":[132,61,132,62],\"els\":[\"0:382\"]},{\"tk\":[132,63,132,66],\"els\":[\"0:380\"]},{\"tk\":[132,66,132,67],\"els\":[\"0:380\"]},{\"tk\":[132,67,132,70],\"els\":[\"0:380\"]},{\"tk\":[135,7,135,17],\"els\":[\"0:382#out:1\"]},{\"tk\":[135,17,135,18],\"els\":[\"0:382\"]},{\"tk\":[135,18,135,19],\"els\":[\"0:380\"]},{\"tk\":[135,21,135,22],\"els\":[\"0:382\"]},{\"tk\":[135,23,135,28],\"els\":[\"0:382\"]},{\"tk\":[135,29,135,30],\"els\":[\"0:382\"]},{\"tk\":[135,31,135,35],\"els\":[\"0:382\",\"0:396\"]},{\"tk\":[141,5,141,7],\"els\":[\"0:143\"]},{\"tk\":[141,9,141,19],\"els\":[\"0:382#out:1\"]},{\"tk\":[141,19,141,20],\"els\":[\"0:143\"]},{\"tk\":[141,20,141,21],\"els\":[\"0:143\"]},{\"tk\":[141,23,141,24],\"els\":[\"0:143\"]},{\"tk\":[141,25,141,32],\"els\":[\"0:143\"]},{\"tk\":[142,7,142,9],\"els\":[\"0:143\"]},{\"tk\":[142,11,142,21],\"els\":[\"0:382#out:1\"]},{\"tk\":[142,21,142,22],\"els\":[\"0:143\"]},{\"tk\":[142,22,142,23],\"els\":[\"0:143\"]},{\"tk\":[142,25,142,27],\"els\":[\"0:143\"]},{\"tk\":[142,28,142,31],\"els\":[\"0:143\"]},{\"tk\":[144,9,144,20],\"els\":[\"0:143\",\"0:51\"]},{\"tk\":[144,21,144,28],\"els\":[\"0:143\",\"0:51\"]},{\"tk\":[144,29,144,30],\"els\":[\"0:143\",\"0:51\"]},{\"tk\":[144,31,144,32],\"els\":[\"0:143\"]},{\"tk\":[144,41,144,51],\"els\":[\"0:382#out:1\"]},{\"tk\":[144,51,144,52],\"els\":[\"0:143\"]},{\"tk\":[144,52,144,53],\"els\":[\"0:143\"]},{\"tk\":[147,9,147,20],\"els\":[\"0:143\",\"0:51\"]},{\"tk\":[147,21,147,28],\"els\":[\"0:143\",\"0:51\"]},{\"tk\":[147,29,147,30],\"els\":[\"0:143\",\"0:51\"]},{\"tk\":[147,31,147,33],\"els\":[\"0:143\"]},{\"tk\":[151,7,151,18],\"els\":[\"0:51\"]},{\"tk\":[151,19,151,26],\"els\":[\"0:51\"]},{\"tk\":[151,27,151,28],\"els\":[\"0:51\"]},{\"tk\":[151,29,151,41],\"els\":[\"0:143\"]},{\"tk\":[157,5,157,7],\"els\":[\"0:144\"]},{\"tk\":[157,9,157,19],\"els\":[\"0:382#out:1\"]},{\"tk\":[157,19,157,20],\"els\":[\"0:144\"]},{\"tk\":[157,20,157,21],\"els\":[\"0:144\"]},{\"tk\":[157,23,157,24],\"els\":[\"0:144\"]},{\"tk\":[157,25,157,32],\"els\":[\"0:144\"]},{\"tk\":[158,7,158,9],\"els\":[\"0:144\"]},{\"tk\":[158,11,158,21],\"els\":[\"0:382#out:1\"]},{\"tk\":[158,21,158,22],\"els\":[\"0:144\"]},{\"tk\":[158,22,158,23],\"els\":[\"0:144\"]},{\"tk\":[158,25,158,27],\"els\":[\"0:144\"]},{\"tk\":[158,28,158,31],\"els\":[\"0:144\"]},{\"tk\":[160,9,160,20],\"els\":[\"0:144\",\"0:52\"]},{\"tk\":[160,21,160,28],\"els\":[\"0:144\",\"0:52\"]},{\"tk\":[160,29,160,30],\"els\":[\"0:144\",\"0:52\"]},{\"tk\":[160,31,160,32],\"els\":[\"0:144\"]},{\"tk\":[160,41,160,51],\"els\":[\"0:382#out:1\"]},{\"tk\":[160,51,160,52],\"els\":[\"0:144\"]},{\"tk\":[160,52,160,53],\"els\":[\"0:144\"]},{\"tk\":[163,9,163,20],\"els\":[\"0:144\",\"0:52\"]},{\"tk\":[163,21,163,28],\"els\":[\"0:144\",\"0:52\"]},{\"tk\":[163,29,163,30],\"els\":[\"0:144\",\"0:52\"]},{\"tk\":[163,31,163,33],\"els\":[\"0:144\"]},{\"tk\":[167,7,167,18],\"els\":[\"0:52\"]},{\"tk\":[167,19,167,26],\"els\":[\"0:52\"]},{\"tk\":[167,27,167,28],\"els\":[\"0:52\"]},{\"tk\":[167,29,167,41],\"els\":[\"0:144\"]},{\"tk\":[173,5,173,7],\"els\":[\"0:145\"]},{\"tk\":[173,9,173,19],\"els\":[\"0:382#out:1\"]},{\"tk\":[173,19,173,20],\"els\":[\"0:145\"]},{\"tk\":[173,20,173,21],\"els\":[\"0:145\"]},{\"tk\":[173,23,173,24],\"els\":[\"0:145\"]},{\"tk\":[173,25,173,32],\"els\":[\"0:145\"]},{\"tk\":[174,7,174,9],\"els\":[\"0:145\"]},{\"tk\":[174,11,174,21],\"els\":[\"0:382#out:1\"]},{\"tk\":[174,21,174,22],\"els\":[\"0:145\"]},{\"tk\":[174,22,174,23],\"els\":[\"0:145\"]},{\"tk\":[174,25,174,27],\"els\":[\"0:145\"]},{\"tk\":[174,28,174,31],\"els\":[\"0:145\"]},{\"tk\":[176,9,176,20],\"els\":[\"0:145\",\"0:53\"]},{\"tk\":[176,21,176,28],\"els\":[\"0:145\",\"0:53\"]},{\"tk\":[176,29,176,30],\"els\":[\"0:145\",\"0:53\"]},{\"tk\":[176,31,176,32],\"els\":[\"0:145\"]},{\"tk\":[176,41,176,51],\"els\":[\"0:382#out:1\"]},{\"tk\":[176,51,176,52],\"els\":[\"0:145\"]},{\"tk\":[176,52,176,53],\"els\":[\"0:145\"]},{\"tk\":[179,9,179,20],\"els\":[\"0:145\",\"0:53\"]},{\"tk\":[179,21,179,28],\"els\":[\"0:145\",\"0:53\"]},{\"tk\":[179,29,179,30],\"els\":[\"0:145\",\"0:53\"]},{\"tk\":[179,31,179,33],\"els\":[\"0:145\"]},{\"tk\":[183,7,183,18],\"els\":[\"0:53\"]},{\"tk\":[183,19,183,26],\"els\":[\"0:53\"]},{\"tk\":[183,27,183,28],\"els\":[\"0:53\"]},{\"tk\":[183,29,183,41],\"els\":[\"0:145\"]},{\"tk\":[189,5,189,7],\"els\":[\"0:146\"]},{\"tk\":[189,9,189,19],\"els\":[\"0:382#out:1\"]},{\"tk\":[189,19,189,20],\"els\":[\"0:146\"]},{\"tk\":[189,20,189,21],\"els\":[\"0:146\"]},{\"tk\":[189,23,189,24],\"els\":[\"0:146\"]},{\"tk\":[189,25,189,32],\"els\":[\"0:146\"]},{\"tk\":[190,7,190,9],\"els\":[\"0:146\"]},{\"tk\":[190,11,190,21],\"els\":[\"0:382#out:1\"]},{\"tk\":[190,21,190,22],\"els\":[\"0:146\"]},{\"tk\":[190,22,190,23],\"els\":[\"0:146\"]},{\"tk\":[190,25,190,27],\"els\":[\"0:146\"]},{\"tk\":[190,28,190,31],\"els\":[\"0:146\"]},{\"tk\":[192,9,192,20],\"els\":[\"0:146\",\"0:54\"]},{\"tk\":[192,21,192,28],\"els\":[\"0:146\",\"0:54\"]},{\"tk\":[192,29,192,30],\"els\":[\"0:146\",\"0:54\"]},{\"tk\":[192,31,192,32],\"els\":[\"0:146\"]},{\"tk\":[192,41,192,51],\"els\":[\"0:382#out:1\"]},{\"tk\":[192,51,192,52],\"els\":[\"0:146\"]},{\"tk\":[192,52,192,53],\"els\":[\"0:146\"]},{\"tk\":[195,9,195,20],\"els\":[\"0:146\",\"0:54\"]},{\"tk\":[195,21,195,28],\"els\":[\"0:146\",\"0:54\"]},{\"tk\":[195,29,195,30],\"els\":[\"0:146\",\"0:54\"]},{\"tk\":[195,31,195,33],\"els\":[\"0:146\"]},{\"tk\":[199,7,199,18],\"els\":[\"0:54\"]},{\"tk\":[199,19,199,26],\"els\":[\"0:54\"]},{\"tk\":[199,27,199,28],\"els\":[\"0:54\"]},{\"tk\":[199,29,199,41],\"els\":[\"0:146\"]},{\"tk\":[205,5,205,17],\"els\":[\"0:332\"]},{\"tk\":[205,18,205,30],\"els\":[\"0:332\"]},{\"tk\":[205,31,205,32],\"els\":[\"0:332\"]},{\"tk\":[205,33,205,41],\"els\":[\"0:340#out:1\"]},{\"tk\":[208,5,208,17],\"els\":[\"0:346\"]},{\"tk\":[208,18,208,32],\"els\":[\"0:346\"]},{\"tk\":[208,33,208,34],\"els\":[\"0:346\"]},{\"tk\":[208,35,208,45],\"els\":[\"0:354#out:1\"]}]}}}","blocks":[{"RTWName":"<Root>/Base_Thrust","SIDString":"crazyflie:11"},{"RTWName":"<Root>/Ref_Roll","SIDString":"crazyflie:12"},{"RTWName":"<Root>/Ref_Pitch","SIDString":"crazyflie:13"},{"RTWName":"<Root>/Ref_YawRate","SIDString":"crazyflie:172"},{"RTWName":"<Root>/Acc_x","SIDString":"crazyflie:5"},{"RTWName":"<Root>/Acc_y","SIDString":"crazyflie:6"},{"RTWName":"<Root>/Acc_z","SIDString":"crazyflie:7"},{"RTWName":"<Root>/Gyro_x","SIDString":"crazyflie:8"},{"RTWName":"<Root>/Gyro_y","SIDString":"crazyflie:9"},{"RTWName":"<Root>/Gyro_z","SIDString":"crazyflie:10"},{"RTWName":"<Root>/Flow_x","SIDString":"crazyflie:254"},{"RTWName":"<Root>/Flow_y","SIDString":"crazyflie:255"},{"RTWName":"<Root>/Constant","SIDString":"crazyflie:396"},{"RTWName":"<Root>/Demux1","SIDString":"crazyflie:383"},{"RTWName":"<Root>/Gain","SIDString":"crazyflie:380"},{"RTWName":"<Root>/Mux","SIDString":"crazyflie:379"},{"RTWName":"<S1>/Acc_x","SIDString":"crazyflie:320"},{"RTWName":"<S1>/Acc_y","SIDString":"crazyflie:321"},{"RTWName":"<S1>/Acc_z","SIDString":"crazyflie:322"},{"RTWName":"<S1>/Gyro_x","SIDString":"crazyflie:323"},{"RTWName":"<S1>/Gyro_y","SIDString":"crazyflie:324"},{"RTWName":"<S1>/Gyro_z","SIDString":"crazyflie:325"},{"RTWName":"<S1>/Atan3","SIDString":"crazyflie:326"},{"RTWName":"<S1>/Atan4","SIDString":"crazyflie:327"},{"RTWName":"<S2>/Roll_Acc","SIDString":"crazyflie:329"},{"RTWName":"<S2>/Roll_Gyro","SIDString":"crazyflie:330"},{"RTWName":"<S2>/ ","SIDString":"crazyflie:331"},{"RTWName":"<S2>/Delay","SIDString":"crazyflie:332"},{"RTWName":"<S2>/Gamma","SIDString":"crazyflie:333"},{"RTWName":"<S2>/Product","SIDString":"crazyflie:334"},{"RTWName":"<S2>/Product1","SIDString":"crazyflie:335"},{"RTWName":"<S2>/Product2","SIDString":"crazyflie:336"},{"RTWName":"<S2>/SamplingRate","SIDString":"crazyflie:337"},{"RTWName":"<S2>/Subtract","SIDString":"crazyflie:338"},{"RTWName":"<S2>/Sum2","SIDString":"crazyflie:339"},{"RTWName":"<S2>/Sum3","SIDString":"crazyflie:340"},{"RTWName":"<S2>/Roll_filtered","SIDString":"crazyflie:341"},{"RTWName":"<S3>/Pitch_Acc","SIDString":"crazyflie:343"},{"RTWName":"<S3>/Pitch_Gyro","SIDString":"crazyflie:344"},{"RTWName":"<S3>/ ","SIDString":"crazyflie:345"},{"RTWName":"<S3>/Delay","SIDString":"crazyflie:346"},{"RTWName":"<S3>/Gamma","SIDString":"crazyflie:347"},{"RTWName":"<S3>/Product","SIDString":"crazyflie:348"},{"RTWName":"<S3>/Product1","SIDString":"crazyflie:349"},{"RTWName":"<S3>/Product2","SIDString":"crazyflie:350"},{"RTWName":"<S3>/SamplingRate","SIDString":"crazyflie:351"},{"RTWName":"<S3>/Subtract","SIDString":"crazyflie:352"},{"RTWName":"<S3>/Sum2","SIDString":"crazyflie:353"},{"RTWName":"<S3>/Sum3","SIDString":"crazyflie:354"},{"RTWName":"<S3>/Pitch_filtered","SIDString":"crazyflie:355"},{"RTWName":"<S1>/Discrete-Time\nIntegrator3","SIDString":"crazyflie:356"},{"RTWName":"<S1>/Discrete-Time\nIntegrator4","SIDString":"crazyflie:357"},{"RTWName":"<S1>/Discrete-Time\nIntegrator5","SIDString":"crazyflie:358"},{"RTWName":"<S1>/Gain","SIDString":"crazyflie:393"},{"RTWName":"<S1>/Gain1","SIDString":"crazyflie:359"},{"RTWName":"<S1>/Gain2","SIDString":"crazyflie:394"},{"RTWName":"<S4>:1","SIDString":"crazyflie:360:1"},{"RTWName":"<S1>/Pitch_Gyro1","SIDString":"crazyflie:361"},{"RTWName":"<S1>/Roll_Gyro1","SIDString":"crazyflie:362"},{"RTWName":"<S1>/Roll_filtered","SIDString":"crazyflie:363"},{"RTWName":"<S1>/Pitch_filtered","SIDString":"crazyflie:364"},{"RTWName":"<S1>/Out3","SIDString":"crazyflie:365"},{"RTWName":"<Root>/Sum","SIDString":"crazyflie:376"},{"RTWName":"<Root>/Sum1","SIDString":"crazyflie:377"},{"RTWName":"<Root>/Sum2","SIDString":"crazyflie:378"},{"RTWName":"<Root>/Sum3","SIDString":"crazyflie:382"},{"RTWName":"<Root>/ToDouble","SIDString":"crazyflie:151"},{"RTWName":"<Root>/ToDouble1","SIDString":"crazyflie:153"},{"RTWName":"<Root>/ToDouble2","SIDString":"crazyflie:154"},{"RTWName":"<Root>/ToDouble3","SIDString":"crazyflie:179"},{"RTWName":"<Root>/ToDouble4","SIDString":"crazyflie:180"},{"RTWName":"<Root>/ToDouble5","SIDString":"crazyflie:181"},{"RTWName":"<Root>/ToUint16","SIDString":"crazyflie:143"},{"RTWName":"<Root>/ToUint16_1","SIDString":"crazyflie:144"},{"RTWName":"<Root>/ToUint16_2","SIDString":"crazyflie:145"},{"RTWName":"<Root>/ToUint16_3","SIDString":"crazyflie:146"},{"RTWName":"<Root>/Motor_1","SIDString":"crazyflie:51"},{"RTWName":"<Root>/Motor_2","SIDString":"crazyflie:52"},{"RTWName":"<Root>/Motor_3","SIDString":"crazyflie:53"},{"RTWName":"<Root>/Motor_4","SIDString":"crazyflie:54"},{"RTWName":"<Root>/Log1","SIDString":"crazyflie:55"},{"RTWName":"<Root>/Log2","SIDString":"crazyflie:56"},{"RTWName":"<Root>/Log3","SIDString":"crazyflie:78"},{"RTWName":"<Root>/Log4","SIDString":"crazyflie:182"},{"RTWName":"<Root>/Log5","SIDString":"crazyflie:183"},{"RTWName":"<Root>/Log6","SIDString":"crazyflie:184"},{"RTWName":"<Root>/Subsystem","SIDString":"crazyflie:319"},{"RTWName":"<S1>/ComplementaryFilter2","SIDString":"crazyflie:328"},{"RTWName":"<S1>/ComplementaryFilter3","SIDString":"crazyflie:342"},{"RTWName":"<S1>/MATLAB Function1","SIDString":"crazyflie:360"}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true}};